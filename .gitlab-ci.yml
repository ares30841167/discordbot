stages:
  - test
  - build
  - release

jest-test:
  image: node:16.12.0-alpine3.14
  stage: test
  tags:
    - areschen-server-1
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  before_script:
    - apk add make libtool autoconf automake gcc g++ libc-dev python3
    - yarn install
  script:
    - yarn test:ci
  coverage: /Lines\s*:\s*\d+.\d+\%/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

docker-build-dev:
  image: docker:20.10.15
  stage: build
  tags:
    - areschen-server-1
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - tag=":$CI_COMMIT_REF_SLUG"
    - echo "Running on branch '$CI_COMMIT_BRANCH', build dev image:\ $CI_REGISTRY_IMAGE${tag}"
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "dev"
      exists:
        - Dockerfile

docker-build-release:
  image: docker:20.10.15
  stage: release
  tags:
    - areschen-server-1
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - tag=":$CI_COMMIT_TAG"
    - echo "Release tag $CI_COMMIT_TAG has been created, build release image:\ $CI_REGISTRY_IMAGE${tag}"
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
  - if: $CI_COMMIT_TAG
    exists:
      - Dockerfile